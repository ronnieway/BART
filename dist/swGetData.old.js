'use strict';console.log('WORKER: executing.');var version='v1::',offlineFundamentals=['/','/index.html','/README.md','/css/main.css','/js/main.js'];self.addEventListener('install',a=>{console.log('WORKER: install event in progress.');a.waitUntil(caches.open('v1:: BART-transportation-data').then(cache=>cache.addAll(offlineFundamentals)).then(()=>{console.log('WORKER: install completed')}))});self.addEventListener('fetch',a=>{console.log('WORKER: fetch event in progress.');if(a.request.method!=='GET'){console.log('WORKER: fetch event ignored.',a.request.method,a.request.url);return}a.respondWith(caches.match(a.request).then(b=>{var e=fetch(a.request).then(c,d).catch(d);console.log('WORKER: fetch event',b?'(cached)':'(network)',a.request.url);return b||e;function c(f){var g=f.clone();console.log('WORKER: fetch response from network.',a.request.url);caches.open('v1:: BART-transportation-data').then(h=>{h.add(a.request)}).then(()=>{console.log('WORKER: fetch response stored in cache.',a.request.url)});return f}function d(){console.log('WORKER: fetch request failed in both cache and network.');return new Response('<h1>Service Unavailable</h1>',{status:503,statusText:'Service Unavailable',headers:new Headers({'Content-Type':'text/html'})})}}))});self.addEventListener('activate',a=>{console.log('WORKER: activate event in progress.');a.waitUntil(caches.keys().then(keys=>Promise.all(keys.filter(key=>!key.startsWith(version)).map(key=>caches.delete(key)))).then(()=>{console.log('WORKER: activate completed.')}))});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
